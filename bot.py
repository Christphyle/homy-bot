import os
import asyncio
import logging
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# === Logs ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# === Chemins ===
BASE_DIR = Path(__file__).resolve().parent
TARIFFS_FILE = BASE_DIR / "tarifs.txt"

# === Helpers ===
def load_token() -> str:
    t = os.getenv("BOT_TOKEN")
    if t:
        return t.strip()
    with open(BASE_DIR / "token.txt", "r", encoding="utf-8") as f:
        return f.read().strip()

def read_tarifs_text() -> str:
    """Lit tarifs.txt (UTF-8). Renvoie un message de secours en cas d'erreur."""
    try:
        text = TARIFFS_FILE.read_text(encoding="utf-8").strip()
        if not text:
            return "–¢–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        return text
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", TARIFFS_FILE)
        return "–¢–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤: %s", e)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤."

# === Bot / Dispatcher ===
TOKEN = load_token()
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === Clavier ===
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å—å")],
        [KeyboardButton(text="üìç –ê–¥—Ä–µ—Å"), KeyboardButton(text="‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç")]
    ],
    resize_keyboard=True
)

# === Handlers ===
@dp.message(Command("start"))
async def start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Homy Studio.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /tarifs, /rdv, /contact.",
        reply_markup=kb
    )

@dp.message(Command("tarifs"))
async def tarifs(m: Message):
    await m.answer(read_tarifs_text())

@dp.message(Command("rdv"))
async def rdv(m: Message):
    await m.answer(
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>, <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b> –∏ "
        "<b>–∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–°—Ä 18:00, –π–æ–≥–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤¬ª)."
    )

@dp.message(Command("contact"))
async def contact(m: Message):
    await m.answer(
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø., 29, –∫–æ—Ä–ø. 2, –ú–æ—Å–∫–≤–∞\n"
        "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 09:00‚Äì21:00\n"
        "–ü–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å ‚Äî –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ."
    )

# Boutons ‚Üí m√™mes handlers
@dp.message(F.text == "üí∞ –¢–∞—Ä–∏—Ñ—ã")
async def tarifs_btn(m: Message):
    await tarifs(m)

@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å—å")
async def rdv_btn(m: Message):
    await rdv(m)

@dp.message(F.text == "üìç –ê–¥—Ä–µ—Å")
async def addr_btn(m: Message):
    await contact(m)

@dp.message(F.text == "‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç")
async def contact_btn(m: Message):
    await contact(m)

# === Main ===
async def main():
    me = await bot.get_me()
    logging.info(f"–ó–∞–ø—É—Å–∫ @{me.username} (long polling). –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="tarifs", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã"),
        BotCommand(command="rdv", description="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
        BotCommand(command="contact", description="–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"),
    ])

    # (optionnel) descriptions
    try:
        await bot.set_my_short_description("–§–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏—è: —Ç–∞—Ä–∏—Ñ—ã, –∑–∞–ø–∏—Å—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.")
        await bot.set_my_description(
            "Homy Studio ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è. "
            "–ê–¥—Ä–µ—Å: –õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø., 29, –∫–æ—Ä–ø. 2, –ú–æ—Å–∫–≤–∞. –í—Ä–µ–º—è: 07:00‚Äì21:00."
        )
    except Exception as e:
        logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ: {e}")

    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
